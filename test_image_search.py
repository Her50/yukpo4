#!/usr/bin/env python3
"""
Script de test pour v√©rifier la cr√©ation d'un service avec une image
et la recherche par image dans Yukpo
"""

import requests
import json
import base64
import time
import os
from PIL import Image
import io

# Configuration
BASE_URL = "http://localhost:3000"  # Ajuster selon votre configuration
API_BASE = f"{BASE_URL}/api"

def encode_image_to_base64(image_path):
    """Encode une image en base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        print(f"‚ùå Erreur lors de l'encodage de l'image: {e}")
        return None

def create_test_service_with_image(image_base64, token):
    """Cr√©e un service de test avec une image"""
    print("üîß Cr√©ation d'un service de test avec l'image...")
    
    service_data = {
        "titre_service": "Service de test - Blazer √©l√©gant",
        "description": "Service de test pour v√©rifier la recherche d'images. Ce service propose un blazer √©l√©gant en plaid beige.",
        "category": "Mode",
        "is_tarissable": False,
        "prix": 15000,
        "devise": "XAF",
        "base64_image": [image_base64]
    }
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(
            f"{API_BASE}/prestataire/valider-service",
            json=service_data,
            headers=headers
        )
        
        if response.status_code == 200:
            service_id = response.json().get("id")
            print(f"‚úÖ Service cr√©√© avec succ√®s! ID: {service_id}")
            return service_id
        else:
            print(f"‚ùå Erreur lors de la cr√©ation du service: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du service: {e}")
        return None

def search_by_image(image_base64, token):
    """Effectue une recherche par image"""
    print("üîç Recherche par image...")
    
    # Convertir le base64 en bytes pour l'upload
    image_bytes = base64.b64decode(image_base64)
    
    # Cr√©er un fichier temporaire pour l'upload
    temp_image_path = "temp_test_image.jpg"
    with open(temp_image_path, "wb") as f:
        f.write(image_bytes)
    
    try:
        # Upload et recherche
        with open(temp_image_path, "rb") as f:
            files = {"image": f}
            headers = {"Authorization": f"Bearer {token}"}
            
            response = requests.post(
                f"{API_BASE}/image-search/upload",
                files=files,
                headers=headers
            )
        
        # Nettoyer le fichier temporaire
        os.remove(temp_image_path)
        
        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ Recherche r√©ussie! {results.get('total_found', 0)} r√©sultats trouv√©s")
            return results
        else:
            print(f"‚ùå Erreur lors de la recherche: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la recherche: {e}")
        # Nettoyer le fichier temporaire en cas d'erreur
        if os.path.exists(temp_image_path):
            os.remove(temp_image_path)
        return None

def verify_image_match(service_id, search_results):
    """V√©rifie si l'image du service cr√©√© est trouv√©e dans les r√©sultats de recherche"""
    print(f"üîç V√©rification du match pour le service {service_id}...")
    
    if not search_results or not search_results.get('results'):
        print("‚ùå Aucun r√©sultat de recherche √† v√©rifier")
        return False
    
    found_service = False
    for result in search_results['results']:
        if result.get('service_id') == service_id:
            similarity = result.get('similarity_score', 0)
            print(f"‚úÖ Service trouv√©! Score de similarit√©: {similarity:.3f}")
            found_service = True
            break
    
    if not found_service:
        print("‚ùå Le service cr√©√© n'a pas √©t√© trouv√© dans les r√©sultats de recherche")
        print("üìä R√©sultats disponibles:")
        for i, result in enumerate(search_results['results'][:5]):  # Afficher les 5 premiers
            print(f"  {i+1}. Service ID: {result.get('service_id')}, Score: {result.get('similarity_score', 0):.3f}")
    
    return found_service

def check_database_state(service_id):
    """V√©rifie l'√©tat de la base de donn√©es pour le service cr√©√©"""
    print(f"üóÑÔ∏è V√©rification de l'√©tat de la base de donn√©es pour le service {service_id}...")
    
    try:
        # V√©rifier le service
        response = requests.get(f"{API_BASE}/services/{service_id}")
        if response.status_code == 200:
            service_data = response.json()
            print(f"‚úÖ Service trouv√© dans la base: {service_data.get('titre_service', 'N/A')}")
        else:
            print(f"‚ùå Service non trouv√© dans la base")
        
        # V√©rifier les m√©dias associ√©s
        response = requests.get(f"{API_BASE}/media/service/{service_id}")
        if response.status_code == 200:
            media_data = response.json()
            print(f"üì∑ {len(media_data)} m√©dia(x) associ√©(s) au service")
            for media in media_data:
                print(f"  - Type: {media.get('type')}, Path: {media.get('path')}")
        else:
            print(f"‚ùå Impossible de r√©cup√©rer les m√©dias du service")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la base: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ Test de cr√©ation et recherche d'images dans Yukpo")
    print("=" * 60)
    
    # V√©rifier que l'image de test existe
    test_image_path = "test_image.jpg"  # L'image fournie par l'utilisateur
    if not os.path.exists(test_image_path):
        print(f"‚ùå Image de test non trouv√©e: {test_image_path}")
        print("üí° Veuillez placer l'image de test dans le r√©pertoire courant")
        return
    
    # Encoder l'image en base64
    image_base64 = encode_image_to_base64(test_image_path)
    if not image_base64:
        return
    
    print(f"üì∑ Image encod√©e en base64 ({len(image_base64)} caract√®res)")
    
    # Demander le token d'authentification
    token = input("üîë Entrez votre token d'authentification: ").strip()
    if not token:
        print("‚ùå Token requis pour continuer")
        return
    
    print("\n" + "=" * 60)
    
    # √âtape 1: Cr√©er un service avec l'image
    service_id = create_test_service_with_image(image_base64, token)
    if not service_id:
        print("‚ùå Impossible de continuer sans service cr√©√©")
        return
    
    print("\n" + "=" * 60)
    
    # Attendre un peu pour que le service soit bien enregistr√©
    print("‚è≥ Attente de 3 secondes pour la synchronisation...")
    time.sleep(3)
    
    # √âtape 2: V√©rifier l'√©tat de la base de donn√©es
    check_database_state(service_id)
    
    print("\n" + "=" * 60)
    
    # √âtape 3: Rechercher par image
    search_results = search_by_image(image_base64, token)
    if not search_results:
        print("‚ùå Impossible de continuer sans r√©sultats de recherche")
        return
    
    print("\n" + "=" * 60)
    
    # √âtape 4: V√©rifier le match
    match_found = verify_image_match(service_id, search_results)
    
    print("\n" + "=" * 60)
    
    # R√©sum√© du test
    if match_found:
        print("üéâ SUCC√àS: Le test de cr√©ation et recherche d'images fonctionne correctement!")
    else:
        print("‚ùå √âCHEC: Le service cr√©√© n'a pas √©t√© trouv√© dans la recherche")
        print("\nüîß Suggestions de d√©bogage:")
        print("1. V√©rifier que la migration image_search est appliqu√©e")
        print("2. V√©rifier que les signatures d'images sont g√©n√©r√©es")
        print("3. V√©rifier les logs du backend")
        print("4. V√©rifier la configuration de la recherche d'images")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main() 