#!/usr/bin/env python3
"""
Script pour v√©rifier l'√©tat de l'index Pinecone
"""

import requests
import json

def check_pinecone_index():
    """V√©rifie l'√©tat de l'index Pinecone"""
    print("üîç V√©rification de l'index Pinecone")
    print("=" * 50)
    
    try:
        headers = {"x-api-key": "yukpo_embedding_key_2024"}
        
        # 1. V√©rifier l'√©tat du microservice
        print("1Ô∏è‚É£ V√©rification du microservice...")
        response = requests.get("http://localhost:8000/health", headers=headers, timeout=10)
        if response.status_code == 200:
            health = response.json()
            print(f"   ‚úÖ Microservice en ligne: {health}")
        else:
            print(f"   ‚ùå Microservice inaccessible: {response.status_code}")
            return
        
        # 2. V√©rifier le seuil de matching actuel
        print("\n2Ô∏è‚É£ V√©rification du seuil de matching...")
        try:
            with open('microservice_embedding/.env', 'r') as f:
                content = f.read()
                for line in content.split('\n'):
                    if 'MATCHING_SCORE_THRESHOLD' in line:
                        print(f"   üìä Seuil configur√©: {line.strip()}")
                        break
        except Exception as e:
            print(f"   ‚ùå Erreur lecture .env: {e}")
        
        # 3. Test avec seuil tr√®s bas
        print("\n3Ô∏è‚É£ Test avec recherche sans filtre...")
        data = {
            "query": "plomberie",
            "type_donnee": "texte",
            "top_k": 10,
            "active": True
        }
        
        response = requests.post(
            "http://localhost:8000/search_embedding_pinecone",
            headers=headers,
            json=data,
            timeout=300
        )
        
        if response.status_code == 200:
            result = response.json()
            results_count = len(result.get('results', []))
            print(f"   üìä R√©sultats trouv√©s: {results_count}")
            print(f"   ‚è±Ô∏è Temps de recherche: {result.get('search_time', 'N/A')}s")
            
            if results_count > 0:
                print(f"   üìã D√©tail des r√©sultats:")
                for i, match in enumerate(result['results'], 1):
                    score = match.get('score', 0)
                    service_id = match.get('service_id', 'N/A')
                    print(f"     {i}. Service {service_id}: score={score:.3f}")
            else:
                print(f"   ‚ö†Ô∏è Aucun r√©sultat trouv√© m√™me avec seuil bas")
        else:
            print(f"   ‚ùå Erreur recherche: {response.status_code}")
        
        # 4. Test avec requ√™te vide pour voir tous les vecteurs
        print("\n4Ô∏è‚É£ Test avec requ√™te g√©n√©rique...")
        data = {
            "query": "test",
            "type_donnee": "texte",
            "top_k": 20,
            "active": True
        }
        
        response = requests.post(
            "http://localhost:8000/search_embedding_pinecone",
            headers=headers,
            json=data,
            timeout=300
        )
        
        if response.status_code == 200:
            result = response.json()
            results_count = len(result.get('results', []))
            print(f"   üìä R√©sultats avec 'test': {results_count}")
            
            if results_count > 0:
                print(f"   üìã Services disponibles:")
                for i, match in enumerate(result['results'], 1):
                    score = match.get('score', 0)
                    service_id = match.get('service_id', 'N/A')
                    print(f"     {i}. Service {service_id}: score={score:.3f}")
            else:
                print(f"   ‚ö†Ô∏è Aucun service trouv√© dans l'index")
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")

def main():
    """Fonction principale"""
    check_pinecone_index()

if __name__ == "__main__":
    main() 