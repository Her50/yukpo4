# Script de correction de la table users
# Ce script applique les corrections n√©cessaires pour r√©soudre l'erreur 500

Write-Host "üîß Correction de la table users" -ForegroundColor Cyan
Write-Host "===============================" -ForegroundColor Cyan

# Configuration
$baseUrl = "http://localhost:3001"
$dbHost = "localhost"
$dbPort = "5432"
$dbName = "yukpo"  # Ajustez selon votre configuration
$dbUser = "postgres"  # Ajustez selon votre configuration

Write-Host "`n1. V√©rification de la sant√© du serveur..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/healthz" -Method Get -TimeoutSec 5
    Write-Host "   ‚úÖ Serveur en ligne: $response" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Serveur inaccessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   V√©rifiez que le serveur backend est en cours d'ex√©cution sur le port 3001" -ForegroundColor Yellow
    exit 1
}

Write-Host "`n2. Test de l'API d'authentification avant correction..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer test_token"} -TimeoutSec 10
    Write-Host "   ‚ùå Erreur: l'API a accept√© un token invalide" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "   ‚úÖ API d'authentification fonctionne (rejette les tokens invalides)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur inattendue: $($_.Exception.Response.StatusCode) - $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n3. Application des corrections de la base de donn√©es..." -ForegroundColor Yellow

# Demander les informations de connexion √† la base de donn√©es
Write-Host "   ‚ÑπÔ∏è  Configuration de la base de donn√©es:" -ForegroundColor Blue
$dbHost = Read-Host "   Host (d√©faut: localhost)" 
if ([string]::IsNullOrEmpty($dbHost)) { $dbHost = "localhost" }

$dbPort = Read-Host "   Port (d√©faut: 5432)"
if ([string]::IsNullOrEmpty($dbPort)) { $dbPort = "5432" }

$dbName = Read-Host "   Nom de la base (d√©faut: yukpo)"
if ([string]::IsNullOrEmpty($dbName)) { $dbName = "yukpo" }

$dbUser = Read-Host "   Utilisateur (d√©faut: postgres)"
if ([string]::IsNullOrEmpty($dbUser)) { $dbUser = "postgres" }

$dbPassword = Read-Host "   Mot de passe" -AsSecureString
$dbPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($dbPassword))

Write-Host "`n   üîç Connexion √† la base de donn√©es..." -ForegroundColor Yellow

# Construire la cha√Æne de connexion
$connectionString = "Host=$dbHost;Port=$dbPort;Database=$dbName;Username=$dbUser;Password=$dbPasswordPlain"

try {
    # V√©rifier la connexion avec psql
    $testConnection = "psql -h $dbHost -p $dbPort -U $dbUser -d $dbName -c 'SELECT 1;'"
    $env:PGPASSWORD = $dbPasswordPlain
    
    $result = Invoke-Expression $testConnection 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Connexion √† la base de donn√©es r√©ussie" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå √âchec de la connexion √† la base de donn√©es" -ForegroundColor Red
        Write-Host "   Erreur: $result" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la connexion: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`n   üîß Application du script de correction..." -ForegroundColor Yellow

# Ex√©cuter le script de correction
try {
    $sqlFile = "scripts/fix_users_table.sql"
    if (Test-Path $sqlFile) {
        $fixCommand = "psql -h $dbHost -p $dbPort -U $dbUser -d $dbName -f $sqlFile"
        $fixResult = Invoke-Expression $fixCommand 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Script de correction appliqu√© avec succ√®s" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Erreur lors de l'application du script" -ForegroundColor Red
            Write-Host "   Erreur: $fixResult" -ForegroundColor Red
        }
    } else {
        Write-Host "   ‚ùå Fichier de correction introuvable: $sqlFile" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de l'ex√©cution du script: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`n4. Test de l'API d'authentification apr√®s correction..." -ForegroundColor Yellow

# Attendre un peu que les changements prennent effet
Start-Sleep -Seconds 3

try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer test_token"} -TimeoutSec 10
    Write-Host "   ‚ùå Erreur: l'API a accept√© un token invalide" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "   ‚úÖ API d'authentification fonctionne toujours (rejette les tokens invalides)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur inattendue: $($_.Exception.Response.StatusCode) - $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n5. Test avec un token valide..." -ForegroundColor Yellow
Write-Host "   ‚ÑπÔ∏è  Pour tester avec un vrai token, copiez-le depuis le localStorage du navigateur" -ForegroundColor Blue
Write-Host "   ‚ÑπÔ∏è  Ouvrez la console du navigateur et tapez: localStorage.getItem('token')" -ForegroundColor Blue

$testToken = Read-Host "   üîë Collez votre token JWT ici (ou appuyez sur Entr√©e pour ignorer)"

if ($testToken -and $testToken -ne "") {
    Write-Host "   üß™ Test avec le token fourni..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer $testToken"} -TimeoutSec 10
        Write-Host "   ‚úÖ SUCC√àS ! API d'authentification fonctionne maintenant" -ForegroundColor Green
        Write-Host "   üìä Donn√©es utilisateur: $($response | ConvertTo-Json -Depth 2)" -ForegroundColor Gray
        
        Write-Host "`nüéâ PROBL√àME R√âSOLU !" -ForegroundColor Green
        Write-Host "L'API /api/user/me fonctionne maintenant correctement." -ForegroundColor White
        
    } catch {
        if ($_.Exception.Response.StatusCode -eq 500) {
            Write-Host "   ‚ùå Erreur 500 persistante - Probl√®me non r√©solu" -ForegroundColor Red
            Write-Host "   üîç V√©rifiez les logs du serveur backend pour plus de d√©tails" -ForegroundColor Yellow
        } else {
            Write-Host "   ‚ùå Erreur inattendue: $($_.Exception.Response.StatusCode) - $($_.Exception.Message)" -ForegroundColor Red
        }
    }
} else {
    Write-Host "   ‚è≠Ô∏è  Test ignor√© - pas de token fourni" -ForegroundColor Yellow
}

Write-Host "`nüîç === CORRECTION TERMIN√âE ===" -ForegroundColor Cyan
Write-Host "`nüìã R√âSUM√â DES ACTIONS EFFECTU√âES:" -ForegroundColor Yellow
Write-Host "1. ‚úÖ V√©rification de la sant√© du serveur" -ForegroundColor Green
Write-Host "2. ‚úÖ Test de l'API avant correction" -ForegroundColor Green
Write-Host "3. ‚úÖ Application des corrections de la base de donn√©es" -ForegroundColor Green
Write-Host "4. ‚úÖ Test de l'API apr√®s correction" -ForegroundColor Green

Write-Host "`nüí° PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "1. Testez l'application dans le navigateur" -ForegroundColor White
Write-Host "2. V√©rifiez que l'API /api/user/me fonctionne" -ForegroundColor White
Write-Host "3. Testez la r√©cup√©ration des services" -ForegroundColor White
Write-Host "4. Si tout fonctionne, passez √† la r√©activation des WebSockets" -ForegroundColor White

Write-Host "`nüöÄ POUR R√âACTIVER LES WEBSOCKETS:" -ForegroundColor Yellow
Write-Host "1. Modifiez CURRENT_PHASE = 'phase2' dans websocket-progressive.ts" -ForegroundColor White
Write-Host "2. D√©commentez les routes WebSocket dans backend/src/lib.rs" -ForegroundColor White
Write-Host "3. Testez progressivement chaque composant WebSocket" -ForegroundColor White

# Nettoyer le mot de passe de la m√©moire
$dbPasswordPlain = $null
$env:PGPASSWORD = $null 