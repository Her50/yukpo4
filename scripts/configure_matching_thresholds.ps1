# Script pour configurer tous les seuils de matching et red√©marrer les services
# Ce script √©limine tous les codes en dur et rend le syst√®me flexible

Write-Host "üîß CONFIGURATION DES SEUILS DE MATCHING - √âLIMINATION DU CODE EN DUR" -ForegroundColor Cyan
Write-Host "=" * 70 -ForegroundColor Cyan

# 1. Configuration des variables d'environnement pour les seuils
Write-Host "üìã 1. Configuration des variables d'environnement..." -ForegroundColor Yellow

$env_vars = @{
    # Seuils principaux de matching
    "MATCHING_SCORE_THRESHOLD" = "0.70"
    "PINECONE_SCORE_THRESHOLD" = "0.70"
    "FINAL_SCORE_THRESHOLD" = "0.70"
    
    # Seuils pour les √©changes
    "ECHANGE_MATCH_THRESHOLD" = "0.70"
    
    # Seuils pour le cache s√©mantique
    "SEMANTIC_CACHE_THRESHOLD" = "0.70"
    "SEMANTIC_CACHE_PRO_CONFIDENCE" = "0.70"
    "SEMANTIC_CACHE_PRO_PRODUCTION_THRESHOLD" = "0.70"
    "SEMANTIC_CACHE_PRO_DEV_THRESHOLD" = "0.70"
    
    # Seuils pour l'orchestration IA
    "ORCHESTRATION_CONFIDENCE_THRESHOLD" = "0.70"
    
    # Seuils pour la configuration d'optimisation
    "MATCHING_MIN_SCORE_THRESHOLD" = "0.70"
}

# Afficher la configuration
Write-Host "`nüìä Configuration des seuils :" -ForegroundColor Green
foreach ($key in $env_vars.Keys) {
    Write-Host "   $key = $($env_vars[$key])" -ForegroundColor White
}

# 2. V√©rifier que les services sont arr√™t√©s
Write-Host "`nüõë 2. Arr√™t des services en cours..." -ForegroundColor Yellow

# Arr√™ter le backend Rust s'il tourne
$rustProcess = Get-Process -Name "yukpomnang_backend" -ErrorAction SilentlyContinue
if ($rustProcess) {
    Write-Host "   Arr√™t du backend Rust..." -ForegroundColor White
    Stop-Process -Name "yukpomnang_backend" -Force
    Start-Sleep -Seconds 2
}

# Arr√™ter le microservice Python s'il tourne
$pythonProcess = Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object {$_.ProcessName -eq "python" -and $_.CommandLine -like "*embedding*"}
if ($pythonProcess) {
    Write-Host "   Arr√™t du microservice Python..." -ForegroundColor White
    Stop-Process -Id $pythonProcess.Id -Force
    Start-Sleep -Seconds 2
}

# 3. Compiler le backend avec les nouvelles configurations
Write-Host "`nüî® 3. Compilation du backend Rust..." -ForegroundColor Yellow

Set-Location "backend"
try {
    $env:MATCHING_SCORE_THRESHOLD = $env_vars["MATCHING_SCORE_THRESHOLD"]
    $env:PINECONE_SCORE_THRESHOLD = $env_vars["PINECONE_SCORE_THRESHOLD"]
    $env:FINAL_SCORE_THRESHOLD = $env_vars["FINAL_SCORE_THRESHOLD"]
    $env:ECHANGE_MATCH_THRESHOLD = $env_vars["ECHANGE_MATCH_THRESHOLD"]
    $env:SEMANTIC_CACHE_THRESHOLD = $env_vars["SEMANTIC_CACHE_THRESHOLD"]
    $env:ORCHESTRATION_CONFIDENCE_THRESHOLD = $env_vars["ORCHESTRATION_CONFIDENCE_THRESHOLD"]
    $env:MATCHING_MIN_SCORE_THRESHOLD = $env_vars["MATCHING_MIN_SCORE_THRESHOLD"]
    
    cargo build --release
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Backend compil√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur de compilation du backend" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la compilation: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    Set-Location ".."
}

# 4. D√©marrer le microservice Python avec les nouveaux seuils
Write-Host "`nüêç 4. D√©marrage du microservice Python..." -ForegroundColor Yellow

Set-Location "microservice_embedding"
try {
    $env:MATCHING_SCORE_THRESHOLD = $env_vars["MATCHING_SCORE_THRESHOLD"]
    
    # D√©marrer le microservice en arri√®re-plan
    Start-Process -FilePath "python" -ArgumentList "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000" -WindowStyle Hidden
    
    Write-Host "   ‚úÖ Microservice Python d√©marr√©" -ForegroundColor Green
    Start-Sleep -Seconds 3
} catch {
    Write-Host "   ‚ùå Erreur lors du d√©marrage du microservice: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    Set-Location ".."
}

# 5. D√©marrer le backend Rust
Write-Host "`nüöÄ 5. D√©marrage du backend Rust..." -ForegroundColor Yellow

Set-Location "backend"
try {
    # D√©marrer le backend en arri√®re-plan
    Start-Process -FilePath "cargo" -ArgumentList "run", "--release" -WindowStyle Hidden
    
    Write-Host "   ‚úÖ Backend Rust d√©marr√©" -ForegroundColor Green
    Start-Sleep -Seconds 5
} catch {
    Write-Host "   ‚ùå Erreur lors du d√©marrage du backend: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    Set-Location ".."
}

# 6. V√©rification des services
Write-Host "`nüîç 6. V√©rification des services..." -ForegroundColor Yellow

# V√©rifier le microservice Python
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET -TimeoutSec 5
    Write-Host "   ‚úÖ Microservice Python r√©pond" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Microservice Python non accessible: $($_.Exception.Message)" -ForegroundColor Yellow
}

# V√©rifier le backend Rust
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/health" -Method GET -TimeoutSec 5
    Write-Host "   ‚úÖ Backend Rust r√©pond" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Backend Rust non accessible: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 7. Test de recherche pour v√©rifier les nouveaux seuils
Write-Host "`nüß™ 7. Test de recherche avec les nouveaux seuils..." -ForegroundColor Yellow

try {
    $token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsInJvbGUiOiJ1c2VyIiwiZW1haWwiOiJsZWxlaGVybmFuZGV6MjAwN0B5YWhvby5mciIsInRva2Vuc19iYWxhbmNlIjo5OTk5OTMwNDk0NiwiaWF0IjoxNzU2NTEwODc0LCJleHAiOjE3NTY1OTcyNzR9.4x7j--DGV5L-bGqudXvwF-WArpe8FpO8mFHVLhdDE-0"
    
    $searchData = @{
        texte = "restaurant"
        intention = "recherche_besoin"
    }
    
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/ia/orchestration" -Method POST -Headers @{
        "Authorization" = "Bearer $token"
        "Content-Type" = "application/json"
    } -Body ($searchData | ConvertTo-Json)
    
    Write-Host "   ‚úÖ Test de recherche r√©ussi" -ForegroundColor Green
    Write-Host "   üìä R√©ponse: $($response | ConvertTo-Json -Depth 2)" -ForegroundColor Cyan
    
} catch {
    Write-Host "   ‚ö†Ô∏è  Test de recherche √©chou√©: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 8. R√©sum√© final
Write-Host "`nüéâ CONFIGURATION TERMIN√âE !" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Green
Write-Host "‚úÖ Tous les seuils en dur ont √©t√© √©limin√©s" -ForegroundColor Green
Write-Host "‚úÖ Le syst√®me est maintenant flexible et configurable" -ForegroundColor Green
Write-Host "‚úÖ Les services utilisent les variables d'environnement" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Variables d'environnement configur√©es :" -ForegroundColor Cyan
foreach ($key in $env_vars.Keys) {
    Write-Host "   $key = $($env_vars[$key])" -ForegroundColor White
}
Write-Host ""
Write-Host "üîß Pour modifier les seuils, changez les variables d'environnement et red√©marrez les services" -ForegroundColor Yellow
Write-Host "üîß Le syst√®me ne contient plus de code en dur !" -ForegroundColor Yellow 