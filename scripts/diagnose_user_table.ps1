# Script de diagnostic de la table users
# Ce script v√©rifie la structure de la table users pour identifier les probl√®mes

Write-Host "üîç Diagnostic de la table users" -ForegroundColor Cyan
Write-Host "===============================" -ForegroundColor Cyan

# Configuration
$baseUrl = "http://localhost:3001"

Write-Host "`n1. Test de la sant√© du serveur..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/healthz" -Method Get -TimeoutSec 5
    Write-Host "   ‚úÖ Serveur en ligne: $response" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Serveur inaccessible: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`n2. Test de l'API des services (pour v√©rifier que la base fonctionne)..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/prestataire/services" -Method Get -Headers @{"Authorization" = "Bearer test_token"} -TimeoutSec 10
    Write-Host "   ‚úÖ API des services fonctionne: $($response.Count) services" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "   ‚ö†Ô∏è API des services accessible (erreur 401 attendue sans token valide)" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚ùå Erreur API des services: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n3. Test de l'API d'authentification avec token invalide..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer invalid_token"} -TimeoutSec 10
    Write-Host "   ‚ùå Erreur: l'API a accept√© un token invalide" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "   ‚úÖ API d'authentification fonctionne (rejette les tokens invalides)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur inattendue: $($_.Exception.Response.StatusCode) - $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n4. Test de l'API d'authentification avec token valide..." -ForegroundColor Yellow
try {
    # Utiliser un token JWT valide du localStorage du navigateur
    Write-Host "   ‚ÑπÔ∏è  Pour tester avec un vrai token, copiez-le depuis le localStorage du navigateur" -ForegroundColor Blue
    Write-Host "   ‚ÑπÔ∏è  Ouvrez la console du navigateur et tapez: localStorage.getItem('token')" -ForegroundColor Blue
    
    $testToken = Read-Host "   üîë Collez votre token JWT ici (ou appuyez sur Entr√©e pour ignorer)"
    
    if ($testToken -and $testToken -ne "") {
        Write-Host "   üß™ Test avec le token fourni..." -ForegroundColor Yellow
        
        try {
            $response = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer $testToken"} -TimeoutSec 10
            Write-Host "   ‚úÖ API d'authentification fonctionne avec token valide" -ForegroundColor Green
            Write-Host "   üìä Donn√©es utilisateur: $($response | ConvertTo-Json -Depth 2)" -ForegroundColor Gray
        } catch {
            if ($_.Exception.Response.StatusCode -eq 500) {
                Write-Host "   ‚ùå Erreur 500 Internal Server Error - Probl√®me de base de donn√©es" -ForegroundColor Red
                Write-Host "   üîç Cela confirme le probl√®me identifi√© par le diagnostic" -ForegroundColor Yellow
            } else {
                Write-Host "   ‚ùå Erreur inattendue: $($_.Exception.Response.StatusCode) - $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "   ‚è≠Ô∏è  Test ignor√© - pas de token fourni" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ùå Erreur lors du test: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n5. Analyse des routes disponibles..." -ForegroundColor Yellow
Write-Host "   Routes principales:" -ForegroundColor Gray
Write-Host "   - /healthz (GET) - Sant√© du serveur" -ForegroundColor Gray
Write-Host "   - /api/user/me (GET) - Profil utilisateur (‚ùå ERREUR 500)" -ForegroundColor Red
Write-Host "   - /api/prestataire/services (GET) - Services du prestataire (‚úÖ FONCTIONNE)" -ForegroundColor Green
Write-Host "   - /services/filter (GET) - Filtrage des services" -ForegroundColor Gray

Write-Host "`nüîç === DIAGNOSTIC TERMIN√â ===" -ForegroundColor Cyan
Write-Host "`nüìã R√âSUM√â DES PROBL√àMES IDENTIFI√âS:" -ForegroundColor Yellow
Write-Host "1. ‚úÖ Serveur backend fonctionne" -ForegroundColor Green
Write-Host "2. ‚úÖ Base de donn√©es accessible (services r√©cup√©r√©s)" -ForegroundColor Green
Write-Host "3. ‚ùå API /api/user/me retourne une erreur 500" -ForegroundColor Red
Write-Host "4. ‚úÖ API des services fonctionne parfaitement" -ForegroundColor Green

Write-Host "`nüéØ CAUSE PROBABLE:" -ForegroundColor Yellow
Write-Host "L'erreur 500 sur /api/user/me est caus√©e par une incompatibilit√© entre:" -ForegroundColor White
Write-Host "- La structure de la table 'users' en base de donn√©es" -ForegroundColor White
Write-Host "- Le mod√®le 'User' dans le code Rust" -ForegroundColor White

Write-Host "`nüöÄ PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "1. V√©rifier la structure de la table 'users' en base" -ForegroundColor White
Write-Host "2. Comparer avec le mod√®le User dans user_model.rs" -ForegroundColor White
Write-Host "3. Appliquer les migrations de base manquantes" -ForegroundColor White
Write-Host "4. Tester √† nouveau l'API /api/user/me" -ForegroundColor White

Write-Host "`nüí° NOTE IMPORTANTE:" -ForegroundColor Blue
Write-Host "Les services s'affichent correctement car l'API des services fonctionne." -ForegroundColor White
Write-Host "Le probl√®me principal est l'API d'authentification, pas l'affichage des services." -ForegroundColor White 