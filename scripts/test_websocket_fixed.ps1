# Script de test - WebSocket corrig√©
Write-Host "TEST WEBSOCKET CORRIG√â" -ForegroundColor Cyan
Write-Host "=======================" -ForegroundColor Cyan

Write-Host "`nüîß CORRECTION APPLIQU√âE:" -ForegroundColor Green
Write-Host "‚úÖ Syntaxe des routes WebSocket corrig√©e (:user_id -> {user_id})" -ForegroundColor White
Write-Host "‚úÖ Compilation backend r√©ussie" -ForegroundColor White
Write-Host "‚úÖ Serveur backend d√©marr√©" -ForegroundColor White

Write-Host "`n1. Test de l'API /api/user/me..." -ForegroundColor Yellow

$baseUrl = "http://localhost:3001"
$realToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsInJvbGUiOiJ1c2VyIiwiZW1haWwiOiJsZWxlaGVybmFuZGV6MjAwN0B5YWhvby5mciIsInRva2Vuc19iYWxhbmNlIjo5OTk5OTI5Njk1NCwiaWF0IjoxNzU2NjMzMTE0LCJleHAiOjE3NTY3MTk1MTR9.TzFdwc2HvnfbSCyYBeNeeBybKYuSw8-Vn2jHP9jRPJg"

try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/user/me" -Method Get -Headers @{"Authorization" = "Bearer $realToken"} -TimeoutSec 15
    
    Write-Host "   ‚úÖ SUCCES ! API /api/user/me fonctionne" -ForegroundColor Green
    Write-Host "   Status Code: $($response.StatusCode)" -ForegroundColor Gray
    Write-Host "   Contenu: $($response.Content)" -ForegroundColor Gray
    
} catch {
    Write-Host "   ‚ùå ERREUR sur /api/user/me" -ForegroundColor Red
    Write-Host "   Type d'erreur: $($_.Exception.GetType().Name)" -ForegroundColor Red
    Write-Host "   Message: $($_.Exception.Message)" -ForegroundColor Red
    
    if ($_.Exception.Response) {
        Write-Host "   Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    }
}

Write-Host "`n2. Test de l'endpoint WebSocket /healthz..." -ForegroundColor Yellow

try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/healthz" -Method Get -TimeoutSec 10
    Write-Host "   ‚úÖ Serveur backend accessible" -ForegroundColor Green
    Write-Host "   Status: $($response.StatusCode)" -ForegroundColor Gray
} catch {
    Write-Host "   ‚ùå Serveur backend inaccessible" -ForegroundColor Red
    Write-Host "   Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n3. Test de l'endpoint WebSocket /ws/status/1..." -ForegroundColor Yellow

try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/ws/status/1" -Method Get -TimeoutSec 10
    Write-Host "   ‚úÖ Endpoint WebSocket accessible (HTTP)" -ForegroundColor Green
    Write-Host "   Status: $($response.StatusCode)" -ForegroundColor Gray
    Write-Host "   Note: Ceci teste l'accessibilit√© HTTP, pas la connexion WebSocket" -ForegroundColor Gray
} catch {
    Write-Host "   ‚ùå Endpoint WebSocket inaccessible" -ForegroundColor Red
    Write-Host "   Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n=== TEST TERMIN√â ===" -ForegroundColor Cyan

Write-Host "`nüéØ R√âSULTAT:" -ForegroundColor Yellow
Write-Host "Si l'API /api/user/me fonctionne et que le serveur est accessible," -ForegroundColor White
Write-Host "l'erreur WebSocket est corrig√©e et vous pouvez maintenant:" -ForegroundColor White
Write-Host "1. Lancer le frontend avec 'npm run dev'" -ForegroundColor White
Write-Host "2. Tester les composants flottants (chat + notifications)" -ForegroundColor White
Write-Host "3. V√©rifier la connexion WebSocket en temps r√©el" -ForegroundColor White

Write-Host "`nüöÄ PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "1. Lancer le frontend: cd frontend && npm run dev" -ForegroundColor White
Write-Host "2. Tester l'interface avec les composants flottants" -ForegroundColor White
Write-Host "3. V√©rifier la connexion WebSocket dans la console du navigateur" -ForegroundColor White 