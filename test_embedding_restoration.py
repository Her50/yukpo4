#!/usr/bin/env python3
"""
Script de test pour v√©rifier la restauration du microservice d'embedding
et la configuration du backend
"""

import os
import sys
import requests
import json
import time

def test_microservice_config():
    """Teste la configuration du microservice d'embedding"""
    print("üîß Test de la configuration du microservice d'embedding...")
    
    # V√©rifier le fichier .env
    env_file = ".env"
    if not os.path.exists(env_file):
        print("‚ùå Fichier .env manquant")
        return False
    
    with open(env_file, 'r') as f:
        env_content = f.read()
    
    # V√©rifier les variables critiques
    required_vars = [
        "PINECONE_API_KEY",
        "PINECONE_INDEX", 
        "PINECONE_ENV",
        "YUKPO_API_KEY",
        "REQUEST_TIMEOUT",
        "EMBEDDING_TIMEOUT"
    ]
    
    for var in required_vars:
        if var not in env_content:
            print(f"‚ùå Variable {var} manquante dans .env")
            return False
    
    print("‚úÖ Configuration .env OK")
    return True

def test_microservice_connection():
    """Teste la connexion au microservice d'embedding"""
    print("\nüîó Test de connexion au microservice d'embedding...")
    
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Microservice d'embedding accessible")
            return True
        else:
            print(f"‚ùå Microservice r√©pond avec code {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Impossible de se connecter au microservice: {e}")
        return False

def test_pinecone_connection():
    """Teste la connexion √† Pinecone via le microservice"""
    print("\nüå≤ Test de connexion √† Pinecone...")
    
    try:
        headers = {"x-api-key": "yukpo_embedding_key_2024"}
        response = requests.post(
            "http://localhost:8000/test_pinecone",
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Connexion Pinecone OK")
            print(f"   Index: {result.get('index_name', 'N/A')}")
            print(f"   Environnement: {result.get('environment', 'N/A')}")
            return True
        else:
            print(f"‚ùå Erreur Pinecone: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_embedding_generation():
    """Teste la g√©n√©ration d'embeddings"""
    print("\nüß† Test de g√©n√©ration d'embeddings...")
    
    try:
        headers = {"x-api-key": "yukpo_embedding_key_2024"}
        data = {
            "value": "Test d'embedding pour v√©rifier la restauration",
            "type_donnee": "texte"
        }
        
        response = requests.post(
            "http://localhost:8000/embedding",
            headers=headers,
            json=data,
            timeout=120  # Utilise le nouveau timeout
        )
        
        if response.status_code == 200:
            result = response.json()
            embedding_length = len(result.get('embedding', []))
            print(f"‚úÖ Embedding g√©n√©r√© avec succ√®s (dimension: {embedding_length})")
            return True
        else:
            print(f"‚ùå Erreur g√©n√©ration embedding: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_backend_config():
    """Teste la configuration du backend"""
    print("\n‚öôÔ∏è Test de la configuration du backend...")
    
    backend_env = "../backend/.env"
    if not os.path.exists(backend_env):
        print("‚ùå Fichier .env du backend manquant")
        return False
    
    with open(backend_env, 'r') as f:
        env_content = f.read()
    
    # V√©rifier les variables critiques du backend
    required_vars = [
        "EMBEDDING_API_URL",
        "EMBEDDING_API_KEY", 
        "EMBEDDING_TIMEOUT_SECONDS",
        "IA_TIMEOUT_SECONDS"
    ]
    
    for var in required_vars:
        if var not in env_content:
            print(f"‚ùå Variable {var} manquante dans le backend")
            return False
    
    print("‚úÖ Configuration backend OK")
    return True

def test_matching_functionality():
    """Teste la fonctionnalit√© de matching"""
    print("\nüîç Test de la fonctionnalit√© de matching...")
    
    try:
        headers = {"x-api-key": "yukpo_embedding_key_2024"}
        data = {
            "query": "service informatique",
            "type_donnee": "texte",
            "top_k": 5,
            "active": True
        }
        
        response = requests.post(
            "http://localhost:8000/search_embedding_pinecone",
            headers=headers,
            json=data,
            timeout=120
        )
        
        if response.status_code == 200:
            result = response.json()
            results_count = len(result.get('results', []))
            print(f"‚úÖ Recherche s√©mantique OK ({results_count} r√©sultats)")
            return True
        else:
            print(f"‚ùå Erreur recherche s√©mantique: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test de restauration du microservice d'embedding")
    print("=" * 60)
    
    # Tests du microservice
    config_ok = test_microservice_config()
    if not config_ok:
        print("\n‚ùå Configuration du microservice √©chou√©e")
        return False
    
    connection_ok = test_microservice_connection()
    if not connection_ok:
        print("\n‚ùå Connexion au microservice √©chou√©e")
        print("üí° Assurez-vous que le microservice est d√©marr√©: uvicorn main:app --host 0.0.0.0 --port 8000")
        return False
    
    pinecone_ok = test_pinecone_connection()
    if not pinecone_ok:
        print("\n‚ùå Connexion Pinecone √©chou√©e")
        return False
    
    embedding_ok = test_embedding_generation()
    if not embedding_ok:
        print("\n‚ùå G√©n√©ration d'embeddings √©chou√©e")
        return False
    
    matching_ok = test_matching_functionality()
    if not matching_ok:
        print("\n‚ùå Fonctionnalit√© de matching √©chou√©e")
        return False
    
    # Tests du backend
    backend_ok = test_backend_config()
    if not backend_ok:
        print("\n‚ùå Configuration du backend √©chou√©e")
        return False
    
    print("\n" + "=" * 60)
    print("‚úÖ RESTAURATION R√âUSSIE !")
    print("‚úÖ Microservice d'embedding op√©rationnel")
    print("‚úÖ Connexion Pinecone fonctionnelle")
    print("‚úÖ Timeouts configur√©s √† 120s")
    print("‚úÖ Backend configur√© pour le microservice")
    print("‚úÖ Fonction de recherche besoin corrig√©e")
    print("‚úÖ Matching global Pinecone op√©rationnel")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 