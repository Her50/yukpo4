# Test des Optimisations de Performance Yukpo
# Teste le cache et les am√©liorations de vitesse

Write-Host "üöÄ Test des Optimisations de Performance Yukpo" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# V√©rifier que le backend est en cours d'ex√©cution
Write-Host "`nüì° V√©rification du backend..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Backend accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend non accessible. D√©marrez-le d'abord avec: cargo run" -ForegroundColor Red
    exit 1
}

# Test 1: Performance du cache
Write-Host "`nüß™ TEST 1: Performance du cache" -ForegroundColor Cyan
Write-Host "--------------------------------" -ForegroundColor Cyan

$testData = @{
    texte = "Je vends des v√™tements pour enfants, boutique en ligne, livraison gratuite"
    intention = "creation_service"
    base64_image = @()
} | ConvertTo-Json

# Premier appel (sans cache)
Write-Host "üìû Premier appel (sans cache)..." -ForegroundColor Yellow
$startTime = Get-Date
try {
    $response1 = Invoke-RestMethod -Uri "http://localhost:3001/api/ia/auto" -Method POST -Body $testData -ContentType "application/json" -TimeoutSec 30
    $firstCallTime = (Get-Date) - $startTime
    $firstCallMs = $firstCallTime.TotalMilliseconds
    Write-Host "‚úÖ Premier appel r√©ussi en $([math]::Round($firstCallMs))ms" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur premier appel: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Pause courte
Start-Sleep -Seconds 2

# Deuxi√®me appel (avec cache)
Write-Host "‚ö° Deuxi√®me appel (avec cache)..." -ForegroundColor Yellow
$startTime = Get-Date
try {
    $response2 = Invoke-RestMethod -Uri "http://localhost:3001/api/ia/auto" -Method POST -Body $testData -ContentType "application/json" -TimeoutSec 30
    $secondCallTime = (Get-Date) - $startTime
    $secondCallMs = $secondCallTime.TotalMilliseconds
    Write-Host "‚úÖ Deuxi√®me appel r√©ussi en $([math]::Round($secondCallMs))ms" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur deuxi√®me appel: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Calcul des am√©liorations
$improvement = (($firstCallMs - $secondCallMs) / $firstCallMs) * 100
$speedup = if ($secondCallMs -gt 0) { $firstCallMs / $secondCallMs } else { [double]::PositiveInfinity }
$cacheWorking = $secondCallMs -lt ($firstCallMs * 0.8)

Write-Host "`nüìä R√âSULTATS DU CACHE:" -ForegroundColor Magenta
Write-Host "Premier appel: $([math]::Round($firstCallMs))ms" -ForegroundColor White
Write-Host "Deuxi√®me appel: $([math]::Round($secondCallMs))ms" -ForegroundColor White
Write-Host "Am√©lioration: $([math]::Round($improvement, 1))% plus rapide" -ForegroundColor White
Write-Host "Acc√©l√©ration: $([math]::Round($speedup, 1))x plus rapide" -ForegroundColor White

if ($cacheWorking) {
    Write-Host "üéâ Cache fonctionne correctement!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Cache ne semble pas fonctionner (am√©lioration < 20%)" -ForegroundColor Yellow
}

# Test 2: Requ√™tes multiples
Write-Host "`nüîÑ TEST 2: Requ√™tes multiples" -ForegroundColor Cyan
Write-Host "----------------------------" -ForegroundColor Cyan

$times = @()
$successCount = 0

for ($i = 1; $i -le 3; $i++) {
    Write-Host "Test #$i..." -ForegroundColor Yellow
    
    $testData = @{
        texte = "Je vends mon ordinateur portable gaming RTX 4070, test #$i"
        intention = "creation_service"
        base64_image = @()
    } | ConvertTo-Json
    
    $startTime = Get-Date
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:3001/api/ia/auto" -Method POST -Body $testData -ContentType "application/json" -TimeoutSec 30
        $callTime = (Get-Date) - $startTime
        $callMs = $callTime.TotalMilliseconds
        $times += $callMs
        $successCount++
        Write-Host "  ‚úÖ R√©ussi en $([math]::Round($callMs))ms" -ForegroundColor Green
    } catch {
        Write-Host "  ‚ùå √âchec: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    if ($i -lt 3) {
        Start-Sleep -Seconds 1
    }
}

# Analyse des r√©sultats
if ($times.Count -gt 0) {
    $avgTime = ($times | Measure-Object -Average).Average
    $minTime = ($times | Measure-Object -Minimum).Minimum
    $maxTime = ($times | Measure-Object -Maximum).Maximum
    
    Write-Host "`nüìä ANALYSE DES PERFORMANCES:" -ForegroundColor Magenta
    Write-Host "Tests r√©ussis: $successCount/3" -ForegroundColor White
    Write-Host "Temps moyen: $([math]::Round($avgTime))ms" -ForegroundColor White
    Write-Host "Min/Max: $([math]::Round($minTime))ms / $([math]::Round($maxTime))ms" -ForegroundColor White
    
    # √âvaluation
    if ($avgTime -lt 5000) {
        Write-Host "üéâ EXCELLENT: Temps moyen < 5s" -ForegroundColor Green
    } elseif ($avgTime -lt 10000) {
        Write-Host "‚úÖ BON: Temps moyen < 10s" -ForegroundColor Green
    } elseif ($avgTime -lt 15000) {
        Write-Host "‚ö†Ô∏è MOYEN: Temps moyen < 15s" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå LENT: Temps moyen > 15s" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Aucun test r√©ussi" -ForegroundColor Red
}

# Test 3: Test Python si disponible
Write-Host "`nüêç TEST 3: Test Python complet" -ForegroundColor Cyan
Write-Host "-----------------------------" -ForegroundColor Cyan

if (Test-Path "benchmark_performance.py") {
    Write-Host "Ex√©cution du benchmark Python..." -ForegroundColor Yellow
    try {
        python benchmark_performance.py
    } catch {
        Write-Host "‚ùå Erreur ex√©cution Python: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ö†Ô∏è Fichier benchmark_performance.py non trouv√©" -ForegroundColor Yellow
}

Write-Host "`n‚úÖ Tests termin√©s!" -ForegroundColor Green 