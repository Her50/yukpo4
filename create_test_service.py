#!/usr/bin/env python3
"""
Cr√©ation d'un service de test avec une image pour tester la recherche
"""

import requests
import base64
import json

def create_test_service():
    """Cr√©e un service de test avec une image"""
    print("üîß Cr√©ation d'un service de test avec image")
    print("=" * 50)
    
    BASE_URL = "http://localhost:3001"
    API_BASE = f"{BASE_URL}/api"
    
    # Charger l'image en base64
    try:
        with open("test_image.jpg", "rb") as f:
            image_data = f.read()
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        print(f"‚úÖ Image charg√©e: {len(image_data)} bytes")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de l'image: {e}")
        return False
    
    # Demander le token d'authentification
    token = input("üîë Entrez votre token d'authentification: ").strip()
    
    if not token:
        print("‚ùå Token requis pour cr√©er un service")
        return False
    
    # Donn√©es du service de test
    service_data = {
        "titre_service": "Service de test - Blazer √©l√©gant",
        "description": "Service de test pour v√©rifier la recherche d'images. Blazer de qualit√© professionnelle.",
        "category": "Mode",
        "is_tarissable": False,
        "prix": 15000,
        "devise": "XAF",
        "base64_image": [image_base64]
    }
    
    print("\nüì§ Cr√©ation du service...")
    
    try:
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            f"{API_BASE}/prestataire/valider-service",
            json=service_data,
            headers=headers,
            timeout=15
        )
        
        print(f"  Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                service_id = result.get("id")
                print(f"‚úÖ Service cr√©√© avec succ√®s! ID: {service_id}")
                
                # V√©rifier que l'image a √©t√© sauvegard√©e
                print("\nüîç V√©rification de la sauvegarde de l'image...")
                time.sleep(2)  # Attendre un peu
                
                # V√©rifier dans la base de donn√©es
                print("  V√©rifiez dans la base que l'image a √©t√© sauvegard√©e")
                print("  Puis relancez le test de recherche d'images")
                
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è R√©ponse non-JSON: {response.text[:200]}")
                return False
                
        elif response.status_code == 401:
            print("‚ùå Erreur d'authentification - token invalide")
            return False
        elif response.status_code == 400:
            print("‚ùå Erreur de validation des donn√©es")
            try:
                error_data = response.json()
                print(f"  D√©tails: {json.dumps(error_data, indent=2)}")
            except:
                print(f"  R√©ponse: {response.text[:200]}")
            return False
        else:
            print(f"‚ùå Erreur lors de la cr√©ation: {response.status_code}")
            print(f"R√©ponse: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception lors de la cr√©ation: {e}")
        return False

if __name__ == "__main__":
    import time
    create_test_service() 