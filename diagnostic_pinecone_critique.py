import os
import requests
import json

print("=== DIAGNOSTIC CRITIQUE PINECONE ===")

# Test 1: V√©rifier les variables d'environnement
print("\n1. üîç V√©rification des variables d'environnement")

env_vars = [
    'PINECONE_API_KEY',
    'PINECONE_ENV', 
    'PINECONE_INDEX'
]

for var in env_vars:
    value = os.environ.get(var, 'NON D√âFINIE')
    if var == 'PINECONE_API_KEY' and value != 'NON D√âFINIE':
        masked_value = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
        print(f"   {var}: {masked_value}")
    else:
        print(f"   {var}: {value}")

# Test 2: V√©rifier la connectivit√© Pinecone directe
print("\n2. üîå Test de connectivit√© Pinecone directe")

try:
    import pinecone
    
    api_key = os.environ.get('PINECONE_API_KEY')
    env = os.environ.get('PINECONE_ENV')
    index_name = os.environ.get('PINECONE_INDEX')
    
    if not all([api_key, env, index_name]):
        print("   ‚ùå Variables d'environnement manquantes pour Pinecone")
    else:
        print(f"   üîë API Key: {'*' * 8 + api_key[-4:] if api_key else 'N/A'}")
        print(f"   üåç Environnement: {env}")
        print(f"   üìä Index: {index_name}")
        
        try:
            pc = pinecone.Pinecone(api_key=api_key)
            print("   ‚úÖ Connexion Pinecone √©tablie")
            
            indexes = pc.list_indexes()
            print(f"   üìã Index disponibles: {[idx.name for idx in indexes]}")
            
            if index_name in [idx.name for idx in indexes]:
                print(f"   ‚úÖ Index '{index_name}' trouv√©")
                
                try:
                    index = pc.Index(index_name)
                    stats = index.describe_index_stats()
                    print(f"   üìä Stats de l'index:")
                    print(f"      - Total vectors: {stats.total_vector_count}")
                    print(f"      - Namespaces: {list(stats.namespaces.keys()) if stats.namespaces else 'Aucun'}")
                    
                    if stats.total_vector_count == 0:
                        print("   üö® CRITIQUE: Index vide !")
                    else:
                        print(f"   ‚úÖ Index contient {stats.total_vector_count} vecteurs")
                        
                except Exception as e:
                    print(f"   ‚ùå Erreur acc√®s index: {e}")
            else:
                print(f"   üö® CRITIQUE: Index '{index_name}' NON trouv√© !")
                
        except Exception as e:
            print(f"   ‚ùå Erreur connexion Pinecone: {e}")
            
except ImportError:
    print("   ‚ùå Module pinecone non install√©")
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")

# Test 3: V√©rifier le microservice
print("\n3. üîå Test du microservice d'embedding")

try:
    response = requests.get('http://localhost:8000/health', timeout=10)
    if response.status_code == 200:
        print("   ‚úÖ Microservice accessible")
        
        # Tester l'endpoint d'indexation
        headers = {
            'Content-Type': 'application/json',
            'x-api-key': 'yukpo_embedding_key_2024'
        }
        
        test_payload = {
            'service_id': 999,
            'value': 'test',
            'type_donnee': 'texte',
            'active': True
        }
        
        response = requests.post('http://localhost:8000/add_embedding_pinecone', 
                               headers=headers, json=test_payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Test d'indexation r√©ussi: {result}")
        else:
            print(f"   ‚ùå Erreur test d'indexation: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            
    else:
        print(f"   ‚ùå Erreur microservice: {response.status_code}")
        
except Exception as e:
    print(f"   ‚ùå Erreur connexion microservice: {e}")

# Test 4: V√©rifier la configuration du microservice
print("\n4. ‚öôÔ∏è Configuration du microservice")

try:
    # Lire le fichier de configuration du microservice
    config_file = "microservice_embedding/services.py"
    if os.path.exists(config_file):
        with open(config_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Chercher les r√©f√©rences Pinecone
        if 'PINECONE_API_KEY' in content:
            print("   ‚úÖ R√©f√©rences Pinecone trouv√©es dans services.py")
        else:
            print("   ‚ùå Aucune r√©f√©rence Pinecone dans services.py")
            
        if 'get_pinecone_index' in content:
            print("   ‚úÖ Fonction get_pinecone_index trouv√©e")
        else:
            print("   ‚ùå Fonction get_pinecone_index manquante")
    else:
        print(f"   ‚ùå Fichier {config_file} non trouv√©")
        
except Exception as e:
    print(f"   ‚ùå Erreur lecture configuration: {e}")

print("\n=== DIAGNOSTIC TERMIN√â ===")
print("\nüö® RECOMMANDATIONS CRITIQUES:")
print("1. V√©rifier que l'index Pinecone n'a pas √©t√© supprim√©")
print("2. Contr√¥ler les variables d'environnement")
print("3. V√©rifier la r√©gion/environnement Pinecone")
print("4. Contr√¥ler les quotas et limites de stockage")
print("5. V√©rifier la persistance des donn√©es en mode serverless") 