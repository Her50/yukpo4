# Test du probl√®me de coh√©rence linguistique
Write-Host "Test du probl√®me de coh√©rence linguistique..." -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# 1. V√©rifier la cl√© Google Translate
Write-Host "`n1Ô∏è‚É£ V√©rification de la cl√© Google Translate..." -ForegroundColor Yellow
$google_key = $env:GOOGLE_TRANSLATE_API_KEY
if ($google_key) {
    Write-Host "‚úÖ GOOGLE_TRANSLATE_API_KEY pr√©sente: $($google_key.Substring(0,10))..." -ForegroundColor Green
} else {
    Write-Host "‚ùå GOOGLE_TRANSLATE_API_KEY ABSENTE!" -ForegroundColor Red
    Write-Host "C'est le probl√®me principal : la traduction √©choue" -ForegroundColor Red
}

# 2. Test de cr√©ation d'embedding avec texte fran√ßais
Write-Host "`n2Ô∏è‚É£ Test cr√©ation d'embedding avec texte fran√ßais..." -ForegroundColor Yellow

$createRequest = @{
    value = "Je suis un m√©canicien automobile √† Esseaka. Je propose des services de r√©paration et d'entretien automobile."
    type_donnee = "texte"
    service_id = 666
    langue = "fra"
    active = $true
    type_metier = "service"
} | ConvertTo-Json

$headers = @{"x-api-key" = "yukpo_embedding_key_2024"}

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/v1/add_embedding_pinecone" -Method POST -Body $createRequest -ContentType "application/json" -Headers $headers
    Write-Host "‚úÖ Embedding cr√©√© avec succ√®s!" -ForegroundColor Green
    Write-Host "R√©ponse: $($response | ConvertTo-Json)"
    
    if ($response.simulated) {
        Write-Host "‚ö†Ô∏è ATTENTION: Embedding simul√© - Pinecone n'est pas configur√©" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur cr√©ation embedding: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. Test de recherche avec le m√™me texte fran√ßais
Write-Host "`n3Ô∏è‚É£ Test de recherche avec le m√™me texte fran√ßais..." -ForegroundColor Yellow
Start-Sleep -Seconds 3

$searchRequest = @{
    query = "Je suis un m√©canicien automobile √† Esseaka. Je propose des services de r√©paration et d'entretien automobile."
    type_donnee = "texte"
    top_k = 10
} | ConvertTo-Json

try {
    $searchResponse = Invoke-RestMethod -Uri "http://localhost:8000/api/v1/search_embedding_pinecone" -Method POST -Body $searchRequest -ContentType "application/json" -Headers $headers
    Write-Host "Recherche r√©sultat: $($searchResponse | ConvertTo-Json)"
    
    if ($searchResponse.results -and $searchResponse.results.Count -gt 0) {
        Write-Host "‚úÖ R√©sultats trouv√©s avec texte fran√ßais!" -ForegroundColor Green
        Write-Host "Nombre de r√©sultats: $($searchResponse.results.Count)" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå Aucun r√©sultat trouv√© avec texte fran√ßais" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur recherche: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. Test de recherche avec texte anglais √©quivalent
Write-Host "`n4Ô∏è‚É£ Test de recherche avec texte anglais √©quivalent..." -ForegroundColor Yellow

$searchRequestEn = @{
    query = "I am a car mechanic in Esseaka. I offer automobile repair and maintenance services."
    type_donnee = "texte"
    top_k = 10
} | ConvertTo-Json

try {
    $searchResponseEn = Invoke-RestMethod -Uri "http://localhost:8000/api/v1/search_embedding_pinecone" -Method POST -Body $searchRequestEn -ContentType "application/json" -Headers $headers
    Write-Host "Recherche anglais r√©sultat: $($searchResponseEn | ConvertTo-Json)"
    
    if ($searchResponseEn.results -and $searchResponseEn.results.Count -gt 0) {
        Write-Host "‚úÖ R√©sultats trouv√©s avec texte anglais!" -ForegroundColor Green
        Write-Host "Nombre de r√©sultats: $($searchResponseEn.results.Count)" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå Aucun r√©sultat trouv√© avec texte anglais" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur recherche anglais: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. Test de recherche avec termes simples
Write-Host "`n5Ô∏è‚É£ Test de recherche avec termes simples..." -ForegroundColor Yellow

$simpleTerms = @("m√©canicien", "mechanic", "automobile", "car", "r√©paration", "repair")

foreach ($term in $simpleTerms) {
    Write-Host "`nTest avec: '$term'" -ForegroundColor Cyan
    
    $searchRequest = @{
        query = $term
        type_donnee = "texte"
        top_k = 5
    } | ConvertTo-Json
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:8000/api/v1/search_embedding_pinecone" -Method POST -Body $searchRequest -ContentType "application/json" -Headers $headers
        
        if ($response.results -and $response.results.Count -gt 0) {
            Write-Host "‚úÖ Trouv√© $($response.results.Count) r√©sultats avec '$term'" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Aucun r√©sultat avec '$term'" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Erreur avec '$term': $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nüéØ Diagnostic du probl√®me:" -ForegroundColor Cyan
Write-Host "1. GOOGLE_TRANSLATE_API_KEY absente = traduction impossible" -ForegroundColor Red
Write-Host "2. Texte fran√ßais envoy√© √† Pinecone qui contient des embeddings anglais" -ForegroundColor Red
Write-Host "3. Incoh√©rence linguistique = recherche impossible" -ForegroundColor Red
Write-Host "`nüí° Solution:" -ForegroundColor Green
Write-Host "Il faut soit:" -ForegroundColor Yellow
Write-Host "- Configurer GOOGLE_TRANSLATE_API_KEY pour traduire les requ√™tes" -ForegroundColor Yellow
Write-Host "- Ou stocker les embeddings dans la langue originale (fran√ßais)" -ForegroundColor Yellow
Write-Host "- Ou d√©sactiver la traduction automatique" -ForegroundColor Yellow 