#!/usr/bin/env python3
"""
Test du backend avec token de d√©veloppement
"""

import requests
import json
import base64

# Configuration
BACKEND_URL = "http://localhost:3001"

def create_dev_token():
    """Cr√©e un token de d√©veloppement pour le backend"""
    # Payload du token
    payload = {
        "sub": "1",  # user_id
        "role": "admin",
        "exp": 9999999999  # Expiration tr√®s lointaine
    }
    
    # Encoder en base64
    payload_str = json.dumps(payload)
    payload_b64 = base64.b64encode(payload_str.encode()).decode()
    
    # Cr√©er le token de d√©veloppement
    dev_token = f"header.{payload_b64}.dev_signature"
    
    return dev_token

def test_backend_with_dev_token():
    print("üß™ TEST DU BACKEND AVEC TOKEN DE D√âVELOPPEMENT")
    print("=" * 50)
    
    # Cr√©er le token de d√©veloppement
    dev_token = create_dev_token()
    print(f"üîë Token de d√©veloppement cr√©√©: {dev_token[:50]}...")
    
    # Headers avec autorisation
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {dev_token}"
    }
    
    # Payload de test
    search_payload = {
        "message": "je cherche une librairie",
        "user_id": 1
    }
    
    print(f"\nüîç Envoi de la requ√™te: {search_payload}")
    print(f"üì§ Headers: {auth_headers}")
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/yukpo",
            json=search_payload,
            headers=auth_headers
        )
        
        print(f"\nüì• R√©ponse re√ßue:")
        print(f"   - Status: {response.status_code}")
        print(f"   - Headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ R√©ponse JSON re√ßue du backend")
            
            # Analyser la r√©ponse
            print(f"\nüìã ANALYSE DE LA R√âPONSE:")
            print(f"   - Message: {result.get('message', 'N/A')}")
            print(f"   - Intention: {result.get('intention', 'N/A')}")
            print(f"   - Nombre de r√©sultats: {result.get('nombre_matchings', 0)}")
            
            # Analyser les r√©sultats
            resultats = result.get('resultats', [])
            if resultats:
                print(f"\nüîç ANALYSE DES R√âSULTATS:")
                for i, service in enumerate(resultats):
                    print(f"\n   Service {i+1}:")
                    print(f"     - ID: {service.get('service_id', 'N/A')}")
                    print(f"     - Score: {service.get('score', 'N/A')}")
                    print(f"     - GPS: {service.get('gps', 'N/A')}")
                    
                    # Analyser les donn√©es
                    data = service.get('data', {})
                    print(f"     - Donn√©es brutes: {json.dumps(data, indent=6, ensure_ascii=False)}")
                    
                    # V√©rifier si les donn√©es contiennent des champs origine_champs
                    has_origine_champs = False
                    for key, value in data.items():
                        if isinstance(value, dict) and 'origine_champs' in value:
                            has_origine_champs = True
                            print(f"       ‚ö†Ô∏è CHAMP 'origine_champs' D√âTECT√â dans {key}: {value['origine_champs']}")
                    
                    if not has_origine_champs:
                        print(f"       ‚úÖ AUCUN CHAMP 'origine_champs' D√âTECT√â - Donn√©es propres")
                    
                    # V√©rifier la structure des donn√©es
                    if 'titre' in data:
                        titre = data['titre']
                        if isinstance(titre, dict) and 'valeur' in titre:
                            print(f"       - Titre extrait: {titre['valeur']}")
                        else:
                            print(f"       - Titre: {titre}")
                    
                    if 'category' in data:
                        category = data['category']
                        if isinstance(category, dict) and 'valeur' in category:
                            print(f"       - Cat√©gorie extraite: {category['valeur']}")
                        else:
                            print(f"       - Cat√©gorie: {category}")
                    
                    if 'description' in data:
                        description = data['description']
                        if isinstance(description, dict) and 'valeur' in description:
                            print(f"       - Description extraite: {description['valeur']}")
                        else:
                            print(f"       - Description: {description}")
            else:
                print(f"‚ùå Aucun r√©sultat trouv√©")
        else:
            print(f"‚ùå Erreur backend: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 50)
    print("üéØ R√âSULTAT ATTENDU:")
    print("   - Le backend doit retourner les vraies donn√©es des services")
    print("   - Pas de champs 'origine_champs' dans les donn√©es")
    print("   - Les donn√©es doivent correspondre aux services trouv√©s")
    print("   - Le service 559614 doit avoir des donn√©es r√©elles, pas de recherche")
    print("=" * 50)

if __name__ == "__main__":
    test_backend_with_dev_token() 