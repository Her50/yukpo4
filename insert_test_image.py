#!/usr/bin/env python3
"""
Insertion directe d'une image de test dans la base de donn√©es
"""

import psycopg2
import json
import base64
import hashlib
from datetime import datetime

def insert_test_image():
    """Ins√®re une image de test dans la base de donn√©es"""
    print("üîß Insertion d'une image de test dans la base de donn√©es")
    print("=" * 60)
    
    # Configuration de la base de donn√©es
    DB_CONFIG = {
        'host': 'localhost',
        'database': 'yukpo_db',
        'user': 'postgres',
        'password': None  # Sera demand√©
    }
    
    try:
        # Demander le mot de passe
        password = input("üîë Entrez le mot de passe PostgreSQL: ").strip()
        if not password:
            print("‚ùå Mot de passe requis")
            return False
        
        DB_CONFIG['password'] = password
        
        # Charger l'image
        print("\nüì∑ Chargement de l'image de test...")
        with open("test_image.jpg", "rb") as f:
            image_data = f.read()
        
        # Calculer le hash MD5
        image_hash = hashlib.md5(image_data).hexdigest()
        
        # Cr√©er des m√©tadonn√©es fictives
        image_metadata = {
            "width": 800,
            "height": 600,
            "format": "jpeg",
            "file_size": len(image_data),
            "dominant_colors": [[255, 255, 255], [0, 0, 0], [128, 128, 128]],
            "color_histogram": [0.1] * 256,
            "edge_density": 0.5,
            "brightness": 0.6,
            "contrast": 0.4
        }
        
        # Cr√©er une signature d'image fictive (192 valeurs float)
        image_signature = [0.5] * 192  # Signature uniforme pour le test
        
        print(f"‚úÖ Image charg√©e: {len(image_data)} bytes")
        print(f"‚úÖ Hash MD5: {image_hash}")
        
        # Connexion √† la base de donn√©es
        print("\nüîå Connexion √† la base de donn√©es...")
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # V√©rifier si la table services a des donn√©es
        cursor.execute("SELECT COUNT(*) FROM services")
        services_count = cursor.fetchone()[0]
        
        if services_count == 0:
            print("‚ö†Ô∏è Aucun service dans la table services")
            print("üîß Cr√©ation d'un service de test...")
            
            # Cr√©er un service de test
            cursor.execute("""
                INSERT INTO services (titre_service, description, category, is_tarissable, prix, devise, data, created_at, updated_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                "Service de test - Blazer √©l√©gant",
                "Service de test pour v√©rifier la recherche d'images",
                "Mode",
                False,
                15000,
                "XAF",
                json.dumps({"test": True}),
                datetime.now(),
                datetime.now()
            ))
            
            service_id = cursor.fetchone()[0]
            print(f"‚úÖ Service de test cr√©√© avec ID: {service_id}")
        else:
            # Utiliser le premier service existant
            cursor.execute("SELECT id FROM services LIMIT 1")
            service_id = cursor.fetchone()[0]
            print(f"‚úÖ Utilisation du service existant ID: {service_id}")
        
        # Ins√©rer l'image dans la table media
        print("\nüì§ Insertion de l'image dans la table media...")
        
        cursor.execute("""
            INSERT INTO media (service_id, type, path, media_type, file_size, file_format, 
                             image_signature, image_hash, image_metadata, uploaded_at)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            service_id,
            "image",
            "test_image.jpg",
            "image",
            len(image_data),
            "jpeg",
            json.dumps(image_signature),
            image_hash,
            json.dumps(image_metadata),
            datetime.now()
        ))
        
        media_id = cursor.fetchone()[0]
        print(f"‚úÖ Image ins√©r√©e avec ID: {media_id}")
        
        # Valider la transaction
        conn.commit()
        
        # V√©rifier l'insertion
        cursor.execute("SELECT COUNT(*) FROM media WHERE type = 'image'")
        media_count = cursor.fetchone()[0]
        print(f"‚úÖ Total d'images dans la base: {media_count}")
        
        # V√©rifier que la signature est bien stock√©e
        cursor.execute("SELECT image_signature IS NOT NULL FROM media WHERE id = %s", (media_id,))
        has_signature = cursor.fetchone()[0]
        print(f"‚úÖ Signature d'image stock√©e: {has_signature}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ Image de test ins√©r√©e avec succ√®s!")
        print("üöÄ Vous pouvez maintenant tester la recherche d'images!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'insertion: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    insert_test_image() 