# Test de transcription audio en production
Write-Host "üé§ Test de transcription audio en production" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# V√©rifier les variables d'environnement
$openai_key = $env:OPENAI_API_KEY
$huggingface_key = $env:HUGGINGFACE_API_KEY

if (-not $openai_key) {
    Write-Host "‚ö†Ô∏è  OPENAI_API_KEY non configur√©e" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ OPENAI_API_KEY configur√©e" -ForegroundColor Green
}

if (-not $huggingface_key) {
    Write-Host "‚ö†Ô∏è  HUGGINGFACE_API_KEY non configur√©e (utilisera la cl√© publique)" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ HUGGINGFACE_API_KEY configur√©e" -ForegroundColor Green
}

# Cr√©er un fichier audio de test simple (1 seconde de silence)
Write-Host "`nüéµ Cr√©ation d'un fichier audio de test..." -ForegroundColor Cyan

# Utiliser PowerShell pour cr√©er un fichier WAV simple
$sampleRate = 16000
$duration = 1  # 1 seconde
$samples = $sampleRate * $duration

# En-t√™te WAV
$wavHeader = @(
    0x52, 0x49, 0x46, 0x46,  # "RIFF"
    0x24, 0x08, 0x00, 0x00,  # Taille du fichier - 8
    0x57, 0x41, 0x56, 0x45,  # "WAVE"
    0x66, 0x6D, 0x74, 0x20,  # "fmt "
    0x10, 0x00, 0x00, 0x00,  # Taille du format
    0x01, 0x00,              # Format PCM
    0x01, 0x00,              # Mono
    0x40, 0x3E, 0x00, 0x00,  # Sample rate (16000)
    0x80, 0x7C, 0x00, 0x00,  # Byte rate
    0x02, 0x00,              # Block align
    0x10, 0x00,              # Bits per sample
    0x64, 0x61, 0x74, 0x61,  # "data"
    0x00, 0x08, 0x00, 0x00   # Taille des donn√©es
)

# Donn√©es audio (silence)
$audioData = @()
for ($i = 0; $i -lt $samples; $i++) {
    $audioData += 0x00, 0x00  # 16-bit silence
}

# Combiner en-t√™te et donn√©es
$wavBytes = $wavHeader + $audioData

# √âcrire le fichier
$testAudioPath = "test_audio.wav"
[System.IO.File]::WriteAllBytes($testAudioPath, $wavBytes)

Write-Host "‚úÖ Fichier audio de test cr√©√©: $testAudioPath" -ForegroundColor Green

# Encoder en base64
$base64Audio = [System.Convert]::ToBase64String($wavBytes)
Write-Host "‚úÖ Audio encod√© en base64 (${base64Audio.Length} caract√®res)" -ForegroundColor Green

# Tester la transcription avec le backend
Write-Host "`nüîç Test de transcription avec le backend..." -ForegroundColor Cyan

$headers = @{
    "Content-Type" = "application/json"
}

$payload = @{
    texte = "Test de transcription audio"
    audio_base64 = @($base64Audio)
} | ConvertTo-Json -Depth 10

Write-Host "üì§ Envoi de la requ√™te au backend..." -ForegroundColor Yellow

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3001/api/ia/auto" -Method POST -Headers $headers -Body $payload
    Write-Host "‚úÖ R√©ponse du backend re√ßue" -ForegroundColor Green
    Write-Host "üìù Contenu: $($response | ConvertTo-Json -Depth 10)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur lors de l'appel au backend: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° Assurez-vous que le backend est d√©marr√© sur le port 3001" -ForegroundColor Yellow
}

# Nettoyage
if (Test-Path $testAudioPath) {
    Remove-Item $testAudioPath
    Write-Host "`nüßπ Fichier de test supprim√©" -ForegroundColor Green
}

Write-Host "`n‚úÖ Test termin√© !" -ForegroundColor Green 